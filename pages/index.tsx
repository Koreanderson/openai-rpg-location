import axios, { AxiosResponse } from "axios";
import Head from "next/head";
import Image from "next/image";
import styles from "@/styles/Home.module.css";
import { useEffect, useState } from "react";
import { GenerateDescriptionPayload, GenerateDescriptionResponse } from "@/common/types";

import Button from "@mui/material/Button";
import Container from "@mui/material/Container";
import Typography from "@mui/material/Typography";
import Grid from "@mui/material/Grid";
import TextField from "@mui/material/TextField";
import CircularProgress from "@mui/material/CircularProgress";
import { type } from "os";
import Box from "@mui/material/Box";

export default function Home() {
  const [description, setDescription] = useState<string | null>();
  const [locationName, setLocationName] = useState("");
  const [locationSize, setLocationSize] = useState("");
  const [locationInhabitants, setLocationInhabitants] = useState("");
  const [locationFocalPoints, setLocationFocalPoints] = useState("");
  const [locationTrade, setLocationTrade] = useState("");
  const [locationConflict, setLocationConflict] = useState("");

  const [enableGuilds, setEnableGuilds] = useState(false);
  const [enableKeyLocations, setEnableKeyLocations] = useState(false);
  const [enablePopulationSize, setEnablePopulationSize] = useState(false);
  const [enableDieties, setEnableDieties] = useState(false);
  const [enableFactions, setEnableFactions] = useState(false);

  const [loading, setLoading] = useState(false);

  useEffect(() => {}, []);

  async function fetchDescription() {
    setLoading(true);

    const params: GenerateDescriptionPayload = {
      name: locationName,
      size: locationSize,
      inhabitants: locationInhabitants,
      focalPoints: locationFocalPoints,
      conflict: locationConflict,
      trade: locationTrade,
      enableGuilds,
      enableKeyLocations,
      enablePopulationSize,
      enableDieties,
      enableFactions,
    };

    const response: AxiosResponse<GenerateDescriptionResponse> =
      await axios.get("/api/description", { params });
    const description: string = response.data.description;

    setDescription(description);
    setLoading(false);
  }

  function Description() {
    return (
      <div>
        {loading ? (
          <CircularProgress color="secondary" />
        ) : (
          <Typography variant="body1">
            {description ? description : ""}
          </Typography>
        )}
      </div>
    );
  }

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Container maxWidth="lg">
        <div className={styles.main}>
          <Grid container spacing={2}>
            <Grid item xs={6}>
              <Box component="form" noValidate autoComplete="off">
                <TextField
                  sx={{ mb: 2, width: 1 }}
                  id="filled-multiline-static"
                  label="Location Name"
                  placeholder="Location Name"
                  variant="filled"
                  onChange={(event: React.ChangeEvent<HTMLInputElement>) => {
                    setLocationName(event.target.value);
                  }}
                />
                <TextField
                  sx={{ mb: 2, width: 1 }}
                  id="filled-multiline-static"
                  label="Location Size"
                  multiline
                  placeholder="Location Size"
                  variant="filled"
                  onChange={(event: React.ChangeEvent<HTMLInputElement>) => {
                    setLocationSize(event.target.value);
                  }}
                />
                <TextField
                  sx={{ mb: 2, width: 1 }}
                  id="filled-multiline-static"
                  label="Location Inhabitants"
                  multiline
                  rows={4}
                  placeholder="Location Inhabitants"
                  variant="filled"
                  onChange={(event: React.ChangeEvent<HTMLInputElement>) => {
                    setLocationInhabitants(event.target.value);
                  }}
                />
                <TextField
                  sx={{ mb: 2, width: 1 }}
                  id="filled-multiline-static"
                  label="Location Focal Points"
                  multiline
                  rows={4}
                  placeholder="Location Focal Points"
                  variant="filled"
                  onChange={(event: React.ChangeEvent<HTMLInputElement>) => {
                    setLocationFocalPoints(event.target.value);
                  }}
                />
                <TextField
                  sx={{ mb: 2, width: 1 }}
                  id="filled-multiline-static"
                  label="Location Trade"
                  multiline
                  rows={4}
                  placeholder="Location Trade"
                  variant="filled"
                  onChange={(event: React.ChangeEvent<HTMLInputElement>) => {
                    setLocationTrade(event.target.value);
                  }}
                />
                <TextField
                  sx={{ mb: 2, width: 1 }}
                  id="filled-multiline-static"
                  label="Location Conflict"
                  multiline
                  rows={4}
                  placeholder="Location Conflict"
                  variant="filled"
                  onChange={(event: React.ChangeEvent<HTMLInputElement>) => {
                    setLocationConflict(event.target.value);
                  }}
                />
                <Button variant="outlined" onClick={fetchDescription}>
                  Generate Description
                </Button>
              </Box>
            </Grid>
            <Grid item xs={6}>
              <Typography variant="h4" component="h1" gutterBottom>
                Prompt
              </Typography>
              <Description></Description>
            </Grid>
          </Grid>
        </div>
      </Container>
    </>
  );
}
